# Docker composeのバージョン
version: "3.9"
# コンテナを定義
services:
  db: # 任意のサービス名
    # DockerHubにあるmySQLの5.7バージョンのイメージ
    image: mysql:5.7 
    volumes:  # volumesで定義したdb_dataを/var/lib/mysqlにmountしている
              ## mount ・・・ volumesで定義したフォルダを同期させているイメージ 
      - db_data:/var/lib/mysql
    restart: always
    # 環境変数を設定
    environment:
      # スーパーユーザーのrootアカウントのパスワードを指定
      MYSQL_ROOT_PASSWORD: somewordpress
      # イメージ起動時に作成するデータベース名を指定
      MYSQL_DATABASE: wordpress
      # 新規ユーザーのユーザー名とパスワード
      MYSQL_USER: QN104
      MYSQL_PASSWORD: w_QuNisAngel_p
    
  wordpress: # 任意のサービス名
    depends_on:
      - db
    # DockerHubにあるwordpressの最新バージョンのイメージ
    image: wordpress:latest
    volumes:
      - wordpress_data:/var/www/html
      #- ./php/php.ini:/usr/local/etc/php/conf.d/php.ini 
      # ホストの作業フォルダ内「./php/php.ini」とコンテナ内「/usr/local/etc/php/conf.d/php.ini」を同期 ※注意！
    ports:
      - "8000:80"
    restart: always
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: QN104 # dbのQN104
      WORDPRESS_DB_PASSWORD: w_QuNisAngel_p # dbのw_QuNisAngel_p
      WORDPRESS_DB_NAME: wordpress

  # phpMyAdmin ... ブラウザ上で簡単にデータベース(MySQL)を操作できるツール
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: wordpress_docker_phpmyadmin
    restart: always
    #environment:
      # ログインフォームでデータベースサーバーに
      #- PMA_ARBITRARY=1
      # 使用するデータベースサーバー
      #- PMA_HOST=db
      #- PMA_USER=wordpress
      #- PMA_PASSWORD=wordpress
    
    depends_on:
      - db
    ports:
      - 8890:80
# dockerボリュームを設定
## 設定しないとdockerをシャットダウンしたときデータベースが消えてしまう
volumes:
  db_data: {}
  wordpress_data: {}